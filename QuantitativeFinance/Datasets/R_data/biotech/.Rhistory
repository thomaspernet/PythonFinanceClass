convdate <- function(df) {
df$Date <- gsub("Fév", "Feb", df$Date)
df$Date <- gsub("Avr", "Apr", df$Date)
df$Date <- gsub("Mai", "May", df$Date)
df$Date <- gsub("Aoû", "Aug", df$Date)
df$Date <- gsub("Déc", "Dec", df$Date)
return(df)
}
df <- convdate(df)
# transform string to dates
strtodate <- function(df){
lesdates <- mdy(df$Date,label = FALSE)
# # we remove the last useless item
lesdates <- lesdates[-length(lesdates)]
# input the date to the columns and order per date
df$Date <- lesdates
df <- df[order(df$Date),]
return(df)
}
df <- strtodate(df)
#####
# GDP
#####
gdp <- read.csv("R_data/gdp_annuel.csv",skip = 4,colClasses = c("character","numeric"))
gdp <- gdp[,1:2]
colnames(gdp) <- c("Date","GDP")
gdp$Date <- as.Date(gdp$Date,format = "%Y")
###########
# inflation
###########
icp <- read.csv("R_data/icp_base_2015.csv",skip=2,colClasses = c("character","numeric"))
colnames(icp) <- c("Date","ICP")
icp$Date <- as.Date(icp$Date,format = "%Y")
###############################
# Non financial corporate loans
###############################
nfcl <- read.csv("R_data/BSI1.M.FR.N.R.A26.A.1.U6.2240.Z01.E.csv",skip=5,sep=";",colClasses = c("character","numeric"))
colnames(nfcl) <- c("Date","NFCloan")
nfcl <- convdate(nfcl)
nfcl <- strtodate(nfcl)
#########################
# Long Term interest rate
#########################
ltir <- read.csv("R_data/FM.D.FR.EUR.FR2.BB.FR10YT_RR.YLD.csv",skip = 5,dec = ",",sep = ";",colClasses = c("character","numeric"))
colnames(ltir) <- c("Date","LTIR")
ltir$Date <- as.Date(ltir$Date,format = "%d/%m/%Y")
#########################
# Short Term interest rate
#########################
stir <- read.csv("R_data/FM.M.U2.EUR.RT.MM.EURIBOR3MD_.HSTA.csv",skip=4,colClasses = c("character","numeric"))
colnames(stir) <- c("Date","STIR")
# put date in the "correct" format for our functions
stir$Date <- paste(substr(stir$Date,5,7),substr(stir$Date,1,4),sep=' ')
stir <- convdate(stir)
stir <- strtodate(stir)
#####################
# merge the data sets
#####################
data <- merge(df, gdp,by="Date",all = TRUE)
data <- merge(data, icp,by="Date",all = TRUE)
data <- merge(data, nfcl,by="Date",all = TRUE)
data <- merge(data, ltir,by="Date",all = TRUE)
data <- merge(data, stir,by="Date",all = TRUE)
# resample daily to yearly
timeseries <- daily2annual(data,mean,na.rm = TRUE)
# import the default flows of NFC in France
df <- read.csv("R_data/DIREN.M.FR.DE.DF.03.N.ZZ.TT.csv",skip = 5, sep = ";",colClasses = c("character","numeric"),encoding="utf-8")
knitr::opts_chunk$set(echo = TRUE)
library(BMA)
library(BMS)
library(gdata)
library(leaps)
library(MSwM)
library(urca)
library(hydroGOF)
library(lubridate)
library(magrittr)
library(hydroTSM) # to convert from daily to yearly
library(zoo)
setwd("/Users/skimeur/Google Drive/empirical_finance")
# import the default flows of NFC in France
df <- read.csv("R_data/DIREN.M.FR.DE.DF.03.N.ZZ.TT.csv",skip = 5, sep = ";",colClasses = c("character","numeric"),encoding="utf-8")
# change column names
colnames(df) <- c('Date','DF')
# convert date names to eng
convdate <- function(df) {
df$Date <- gsub("Fév", "Feb", df$Date)
df$Date <- gsub("Avr", "Apr", df$Date)
df$Date <- gsub("Mai", "May", df$Date)
df$Date <- gsub("Aoû", "Aug", df$Date)
df$Date <- gsub("Déc", "Dec", df$Date)
return(df)
}
df <- convdate(df)
# transform string to dates
strtodate <- function(df){
lesdates <- mdy(df$Date,label = FALSE)
# # we remove the last useless item
lesdates <- lesdates[-length(lesdates)]
# input the date to the columns and order per date
df$Date <- lesdates
df <- df[order(df$Date),]
return(df)
}
df <- strtodate(df)
gdp <- read.csv("R_data/gdp_annuel.csv",skip = 4,colClasses = c("character","numeric"))
gdp <- gdp[,1:2]
colnames(gdp) <- c("Date","GDP")
gdp$Date <- as.Date(gdp$Date,format = "%Y")
icp <- read.csv("R_data/icp_base_2015.csv",skip=2,colClasses = c("character","numeric"))
colnames(icp) <- c("Date","ICP")
icp$Date <- as.Date(icp$Date,format = "%Y")
nfcl <- read.csv("R_data/BSI1.M.FR.N.R.A26.A.1.U6.2240.Z01.E.csv",skip=5,sep=";",colClasses = c("character","numeric"))
colnames(nfcl) <- c("Date","NFCloan")
nfcl <- convdate(nfcl)
nfcl <- strtodate(nfcl)
colnames(ltir) <- c("Date","LTIR")
ltir <- read.csv("R_data/FM.D.FR.EUR.FR2.BB.FR10YT_RR.YLD.csv",skip = 5,dec = ",",sep = ";",colClasses = c("character","numeric"))
colnames(ltir) <- c("Date","LTIR")
ltir$Date <- as.Date(ltir$Date,format = "%d/%m/%Y")
stir <- read.csv("R_data/FM.M.U2.EUR.RT.MM.EURIBOR3MD_.HSTA.csv",skip=4,colClasses = c("character","numeric"))
colnames(stir) <- c("Date","STIR")
# put date in the "correct" format for our functions
stir$Date <- paste(substr(stir$Date,5,7),substr(stir$Date,1,4),sep=' ')
View(stir)
stir <- convdate(stir)
stir <- strtodate(stir)
data <- merge(df, gdp,by="Date",all = TRUE)
data <- merge(data, icp,by="Date",all = TRUE)
data <- merge(data, nfcl,by="Date",all = TRUE)
data <- merge(data, ltir,by="Date",all = TRUE)
data <- merge(data, stir,by="Date",all = TRUE)
View(data)
# convert the data frame to a zoo object
timeseries <- read.zoo(data, format = "%Y-%m-%d")
# resample daily to yearly
test <- aggregae(timeseries,as.year,mean)
# resample daily to yearly
as.year <- function(x) as.numeric(floor(as.yearmon(x)))
test <- aggregate(timeseries,as.year,mean)
dailyts <- read.zoo(data, format = "%Y-%m-%d")
# resample daily to yearly, using mean
as.year <- function(x) as.numeric(floor(as.yearmon(x)))
timeseries <- aggregate(dailyts,as.year,mean)
par(mfrow = c(3,2), mar=c(3,4,1.5,0.5), oma=c(0.4,1,1,1))
plot(timeseries[,"DF"],main="Corporate default flow", ylab="",xlab="",col="blue")
timeseries$DF
timeseries <- aggregate(dailyts,as.year,mean,rm.na = TRUE)
timeseries$DF
timeseries <- aggregate(dailyts,as.year,mean,na.rm = TRUE)
timeseries$DF
plot(timeseries[,"DF"],main="Corporate default flow", ylab="",xlab="",col="blue")
par(mfrow = c(3,2), mar=c(3,4,1.5,0.5), oma=c(0.4,1,1,1))
plot(timeseries[,"DF"],main="Corporate default flow", ylab="",xlab="",col="blue")
plot(timeseries[,"GDP"],main="French GDP", ylab="",xlab="",col="blue")
plot(timeseries[,"ICP"],main="Inflation", ylab="",xlab="",col="blue")
plot(timeseries[,"NFCloan"],main="Loans to NFC in France", ylab="",xlab="",col="blue")
plot(timeseries[,"LTIR"],main="Long Term interest rate", ylab="",xlab="",col="blue")
plot(timeseries[,"STIR"],main="Short Term interest rate", ylab="",xlab="",col="blue")
stats_des = summary(cbind(timeseries[,"DF"],timeseries[,"GDP"],timeseries[,"ICP"],timeseries[,"NFCloan"],timeseries[,"LTIR"],timeseries[,"STIR"]))
colnames(stats_des)=c("index","DF","GDP","ICP","NFCloan","LTIR","STIR")
stats_des
timeseries
timeseries <- window(timeseries,start = 1994)
stats_des = summary(cbind(timeseries[,"DF"],timeseries[,"GDP"],timeseries[,"ICP"],timeseries[,"NFCloan"],timeseries[,"LTIR"],timeseries[,"STIR"]))
colnames(stats_des)=c("index","DF","GDP","ICP","NFCloan","LTIR","STIR")
stats_des
varlist <- c("DF","GDP","ICP","NFCloan","LTIR","STIR")
adf.test(timeseries[,varlist[1]])
adf.test(timeseries[,"DF"])
adf.test(timeseries["DF"])
library(tseries) # for unit root test
adf.test(timeseries[,"DF"])
adf.test(timeseries[,varlist[1]])
for (vari in varlist) {
adf.test(timeseries[,vari])
}
View(data)
View(data)
timeseries
timeseries <- window(timeseries,start = 1994,end = 2016)
knitr::opts_chunk$set(echo = TRUE)
library(BMA)
library(BMS)
library(gdata)
library(leaps)
library(MSwM)
library(urca)
library(hydroGOF)
library(lubridate)
library(magrittr)
library(hydroTSM) # to convert from daily to yearly
library(zoo) # for time series object
setwd("/Users/skimeur/Google Drive/empirical_finance")
##############
# default flow
##############
# import the default flows of NFC in France
df <- read.csv("R_data/DIREN.M.FR.DE.DF.03.N.ZZ.TT.csv",skip = 5, sep = ";",colClasses = c("character","numeric"),encoding="utf-8")
# change column names
colnames(df) <- c('Date','DF')
# convert date names to eng
convdate <- function(df) {
df$Date <- gsub("Fév", "Feb", df$Date)
df$Date <- gsub("Avr", "Apr", df$Date)
df$Date <- gsub("Mai", "May", df$Date)
df$Date <- gsub("Aoû", "Aug", df$Date)
df$Date <- gsub("Déc", "Dec", df$Date)
return(df)
}
df <- convdate(df)
# transform string to dates
strtodate <- function(df){
lesdates <- mdy(df$Date,label = FALSE)
# # we remove the last useless item
lesdates <- lesdates[-length(lesdates)]
# input the date to the columns and order per date
df$Date <- lesdates
df <- df[order(df$Date),]
return(df)
}
df <- strtodate(df)
#####
# GDP
#####
gdp <- read.csv("R_data/gdp_annuel.csv",skip = 4,colClasses = c("character","numeric"))
gdp <- gdp[,1:2]
colnames(gdp) <- c("Date","GDP")
gdp$Date <- as.Date(gdp$Date,format = "%Y")
###########
# inflation
###########
icp <- read.csv("R_data/icp_base_2015.csv",skip=2,colClasses = c("character","numeric"))
colnames(icp) <- c("Date","ICP")
icp$Date <- as.Date(icp$Date,format = "%Y")
###############################
# Non financial corporate loans
###############################
nfcl <- read.csv("R_data/BSI1.M.FR.N.R.A26.A.1.U6.2240.Z01.E.csv",skip=5,sep=";",colClasses = c("character","numeric"))
colnames(nfcl) <- c("Date","NFCloan")
nfcl <- convdate(nfcl)
nfcl <- strtodate(nfcl)
#########################
# Long Term interest rate
#########################
ltir <- read.csv("R_data/FM.D.FR.EUR.FR2.BB.FR10YT_RR.YLD.csv",skip = 5,dec = ",",sep = ";",colClasses = c("character","numeric"))
colnames(ltir) <- c("Date","LTIR")
ltir$Date <- as.Date(ltir$Date,format = "%d/%m/%Y")
#########################
# Short Term interest rate
#########################
stir <- read.csv("R_data/FM.M.U2.EUR.RT.MM.EURIBOR3MD_.HSTA.csv",skip=4,colClasses = c("character","numeric"))
colnames(stir) <- c("Date","STIR")
# put date in the "correct" format for our functions
stir$Date <- paste(substr(stir$Date,5,7),substr(stir$Date,1,4),sep=' ')
stir <- convdate(stir)
stir <- strtodate(stir)
#####################
# merge the data sets
#####################
data <- merge(df, gdp,by="Date",all = TRUE)
data <- merge(data, icp,by="Date",all = TRUE)
data <- merge(data, nfcl,by="Date",all = TRUE)
data <- merge(data, ltir,by="Date",all = TRUE)
data <- merge(data, stir,by="Date",all = TRUE)
# convert the data frame to a zoo object
dailyts <- read.zoo(data, format = "%Y-%m-%d")
# resample daily to yearly, using mean
as.year <- function(x) as.numeric(floor(as.yearmon(x)))
timeseries <- aggregate(dailyts,as.year,mean,na.rm = TRUE)
#timeseries <- daily2annual(data,mean,na.rm = TRUE)
timeseries <- window(timeseries,start = 1994,end = 2016)
timeseries
ADF <- function(x){
if(ur.df(x)@teststat<qnorm(c(.01,.05,.1)/2)[3]){
print(paste("your series is stationary at the 90% critical value"))
} else{
print(paste("your series is not stationary at the 90% critical value"))
}
}
# we list the variables
varlist <- c("DF","GDP","ICP","NFCloan","LTIR","STIR")
for (vari in varlist) {
ADF(timeseries[,vari])
}
for (vari in varlist) {
print ("for" vari)
print (vari)
for (vari in varlist) {
print (vari)
ADF(timeseries[,vari])
}
test <- diff(timeseries[,"DF"])
timeseries <- aggregate(dailyts,as.year,mean,na.rm = TRUE)
timeseries
vardiff <- c("DF","GDP","ICP","NFCloan")
for (vari in vardiff){
timeseries[,vari] <- diff(timeseries[,vari])/timeseries[,vari][-length(timeseries[,vari])]
}
test <- diff(timeseries[,vari])/timeseries[,vari][-length(timeseries[,vari])]
test <- c(NA,diff(timeseries[,vari])/timeseries[,vari][-length(timeseries[,vari])])
for (vari in vardiff){
timeseries[2:nrow(timeseries),vari] <- diff(timeseries[,vari])/timeseries[,vari][-length(timeseries[,vari])]
}
timeseries[2:nrow(timeseries),vari]
diff(timeseries[,vari])/timeseries[,vari][-length(timeseries[,vari])]
timeseries[2:nrow(timeseries),vari]
diff(timeseries[,vari])/timeseries[,vari][-1)]
diff(timeseries[,vari])
diff(timeseries[,vari])/timeseries[,vari][-1]
timeseries[2:nrow(timeseries),vari] <- diff(timeseries[,vari])/timeseries[,vari][-1]
vardiff <- c("DF","GDP","ICP","NFCloan")
for (vari in vardiff){
timeseries[2:nrow(timeseries),vari] <- diff(timeseries[,vari])/timeseries[,vari][-1]
}
timeseries <- aggregate(dailyts,as.year,mean,na.rm = TRUE)
vardiff <- c("DF","GDP","ICP","NFCloan")
for (vari in vardiff){
timeseries[2:nrow(timeseries),vari] <- diff(timeseries[,vari])/timeseries[,vari][-1]
}
timeseries
timeseries <- window(timeseries,start = 1994,end = 2016)
stats_des = summary(cbind(timeseries[,"DF"],timeseries[,"GDP"],timeseries[,"ICP"],timeseries[,"NFCloan"],timeseries[,"LTIR"],timeseries[,"STIR"]))
colnames(stats_des)=c("Date","DF","GDP","ICP","NFCloan","LTIR","STIR")
stats_des
for (vari in varlist) {
print (vari)
ADF(timeseries[,vari])
}
logit_df =  log( timeseries[,"DF"] / (1-(timeseries[,"DF"])))
logit_df
timeseries[,"DF"]
timeseries <- aggregate(dailyts,as.year,mean,na.rm = TRUE)
vardiff <- c("GDP","ICP","NFCloan")
for (vari in vardiff){
timeseries[2:nrow(timeseries),vari] <- diff(timeseries[,vari])/timeseries[,vari][-1]
}
logit_df =  log( timeseries[,"DF"] / (1-(timeseries[,"DF"])))
logit_df
timeseries <- aggregate(dailyts,as.year,mean,na.rm = TRUE)
vardiff <- c("DF","GDP","ICP","NFCloan")
for (vari in vardiff){
timeseries[2:nrow(timeseries),vari] <- diff(timeseries[,vari])/timeseries[,vari][-1]
}
timeseries <- window(timeseries,start = 1994,end = 2016)
varlist <- c("DF","GDP","ICP","NFCloan","LTIR","STIR")
for (vari in varlist) {
print (vari)
ADF(timeseries[,vari])
}
current_mod = lm(DF ~ GDP+ ICP,data=timeseries)
summary(current_mod)
# add the DF and inflation lagged
timeseries$DF1 <- Lag(timeseries$DF,k=1)
?zoo::lag
?lag
# add the DF and inflation lagged
timeseries$DF1 <- lag(timeseries$DF,k=1)
timeseries
# add the DF and inflation lagged
timeseries$DF1 <- lag(timeseries$DF,k=-1)
# add the DF and inflation lagged
timeseries$DF1 <- lag(timeseries$DF)
# add the DF and inflation lagged
timeseries$DF2 <- lag(timeseries$DF)
timeseries
# add the DF and inflation lagged
timeseries$DF1[2:nrow((timeseries))] <- lag(timeseries$DF)
timeseries
timeseries$ICP1[2:nrow((timeseries))] <- lag(timeseries$ICP)
timeseries
# regression
current_mod = lm(DF ~ DF1 + GDP+ ICP1,data = timeseries)
summary(current_mod)
timeseries <- aggregate(dailyts,as.year,mean,na.rm = TRUE)
vardiff <- c("DF","GDP","ICP","NFCloan")
for (vari in vardiff){
timeseries[2:nrow(timeseries),vari] <- diff(timeseries[,vari])/timeseries[,vari][-1]
}
timeseries <- window(timeseries,start = 1994,end = 2016)
timeseries$DF1[2:nrow((timeseries))] <- lag(timeseries$DF)
timeseries$ICP1[2:nrow((timeseries))] <- lag(timeseries$ICP)
# regression
current_mod = lm(DF ~ DF1 + GDP+ ICP1,data = timeseries)
summary(current_mod)
# regression
current_mod = lm(DF ~ GDP+ ICP1,data = timeseries)
summary(current_mod)
autoreg_mod = lm(DF ~ DF1 + GDP+ ICP1,data = timeseries)
summary(autoreg_mod)
timeseries
# add the DF and inflation lagged
timeseries$DF1[2:nrow((timeseries))] <- timeseries$DF[-nrow(timeseries)]
timeseries$DF1[2:nrow((timeseries))] <- timeseries$DF[-nrow(timeseries)]
timeseries$ICP1[2:nrow((timeseries))] <- timeseries$ICP[-nrow(timeseries)]
# regression
current_mod = lm(DF ~ GDP+ ICP1,data = timeseries)
summary(current_mod)
# regression
autoreg_mod = lm(DF ~ DF1 + GDP+ ICP1,data = timeseries)
summary(autoreg_mod)
timeseries
summary(autoreg_mod)
dwtest(DF ~ DF1 + GDP+ ICP1,data = timeseries)
library(lmtest)
dwtest(DF ~ DF1 + GDP+ ICP1,data = timeseries)
current_mod_pred = predict(autoreg_mod)
current_mod_pred =  ts(current_mod_pred, start=c(data[2,1]), frequency=1)
current_mod_pred_lev = exp(current_mod_pred)/(1+exp(current_mod_pred))*100
plot(timeseries[,"dr"],main="In-sample prediction",ylab="Defaut rate in %",xlab="",col="blue",lty=1)
plot(timeseries[,"DF"],main="In-sample prediction",ylab="Defaut rate in %",xlab="",col="blue",lty=1)
lines(current_mod_pred,col="red",lty=2)
current_mod_pred = predict(autoreg_mod)
current_mod_pred =  ts(current_mod_pred, start=c(data[2,1]), frequency=1)
plot(timeseries[,"DF"],main="In-sample prediction",ylab="Defaut rate in %",xlab="",col="blue",lty=1)
lines(current_mod_pred,col="red",lty=2)
legend(2010,2,legend=c("Observed", "Estimated"), lty=c(1,2), col=c("blue","red"),cex=0.8)
current_mod_pred = predict(autoreg_mod)
plot(timeseries[,"DF"],main="In-sample prediction",ylab="Defaut Flow growth rate in %",xlab="",col="blue",lty=1)
lines(current_mod_pred,col="red",lty=2)
current_mod_pred =  ts(current_mod_pred, start=c(timeseries$Date[2]), frequency=1)
View(data)
current_mod_pred = predict(autoreg_mod)
current_mod_pred =  ts(current_mod_pred, start=1995, frequency=1)
plot(timeseries[,"DF"],main="In-sample prediction",ylab="Defaut Flow growth rate in %",xlab="",col="blue",lty=1)
lines(current_mod_pred,col="red",lty=2)
legend(2010,2,legend=c("Observed", "Estimated"), lty=c(1,2), col=c("blue","red"),cex=0.8)
current_mod_pred = predict(current_mod)
current_mod_pred =  ts(current_mod_pred, start=1995, frequency=1)
plot(timeseries[,"DF"],main="In-sample prediction",ylab="Defaut Flow growth rate in %",xlab="",col="blue",lty=1)
lines(current_mod_pred,col="red",lty=2)
legend(2010,2,legend=c("Observed", "Estimated"), lty=c(1,2), col=c("blue","red"),cex=0.8)
current_mod_pred = predict(autoreg_mod)
current_mod_pred =  ts(current_mod_pred, start=1995, frequency=1)
plot(timeseries[,"DF"],main="In-sample prediction",ylab="Defaut Flow growth rate in %",xlab="",col="blue",lty=1)
lines(current_mod_pred,col="red",lty=2)
legend(2010,2,legend=c("Observed", "Estimated"), lty=c(1,2), col=c("blue","red"),cex=0.8)
x = timeseries$DF
varexplicative <- c("GDP","ICP","NFCloan","LTIR","STIR","ICP1")
y = timeseries[,varexplicative]
mod_search = regsubsets(x=x,y=y,nbest=3, nvmax=4,intercept=TRUE,method="exhaustive")
y = timeseries$DF
varexplicative <- c("GDP","ICP","NFCloan","LTIR","STIR","ICP1")
x = timeseries[,varexplicative]
mod_search = regsubsets(x=x,y=y,nbest=3, nvmax=4,intercept=TRUE,method="exhaustive")
coef(mod_search, 1:12)
timeseries <- window(timeseries,start = 1995,end = 2016)
y = timeseries$DF
varexplicative <- c("GDP","ICP","NFCloan","LTIR","STIR","ICP1")
x = timeseries[,varexplicative]
mod_search = regsubsets(x=x,y=y,nbest=3, nvmax=4,intercept=TRUE,method="exhaustive")
varexplicative <- c("GDP","ICP")
x = timeseries[,varexplicative]
mod_search = regsubsets(x=x,y=y,nbest=3, nvmax=4,intercept=TRUE,method="exhaustive")
y
x
mod_search <- leaps(x=x,y=y)
class(y)
class(x)
mod_search <- leaps(x=timeseries$GDP,y=timeseries$DF)
mod_search <- leaps(x=timeseries[,c("GDP","ICP")],y=timeseries$DF)
mod_search <- leaps(x=timeseries[,c("LTIR","STIR")],y=timeseries$DF)
z <- timeseries
index(z) <- as.Date(format(time(z)),tz="")
index(z) <- as.Date(format(time(z)))
index(z) <- as.Date(time(z))
index(z) <- as.Date(time(z),format="%Y")
z <- timeseries
index(z) <- as.Date(time(z),format="%Y")
index(z) <- as.Date(index(z),format="%Y")
z <- timeseries
index(z) <- as.Date(index(z),format="%Y")
mod_search <- leaps(x=z[,c("LTIR","STIR")],y=z$DF)
z
z[,c("LTIR","STIR")]
z$DF
z[,"DF"]
mod_search <- leaps(x=z[,c("LTIR","STIR")],y=z[,"DF"])
mod_search <- leaps(y=z[,c("LTIR","STIR")],x=z[,"DF"])
mod_search <- regsubsets(x=z[,c("LTIR","STIR")],y=z[,"DF"])
x = cbind(z[,"LTIR"],z[,"STIR"])
mod_search <- leaps(x=x,y=z[,"DF"])
x = cbind(z[,"LTIR"],z[,"STIR"])
y = z[,"DF"]
mod_search <- leaps(x=x,y=y
mod_search <- leaps(x=x,y=y)
mod_search <- leaps(x=x,y=y)
mod_search <- regsubset(x=x,y=y)
mod_search <- regsubsets(x=x,y=y)
install.packages(c("dbplyr", "digest", "DRR", "git2r", "Hmisc", "lava", "mgcv", "pcaPP", "pillar", "recipes", "rpart", "rprojroot", "sp", "utf8", "viridis", "zoo"))
library(shiny); runApp('Google Drive/empirical_finance/app_biotech.R')
runApp('Google Drive/empirical_finance/app_biotech.R')
library(rsconnect)
rsconnect::setAccountInfo(name='skimeur',
token='4E661575E29A9488BC079DAA64CA5C05',
secret='<SECRET>')
rsconnect::setAccountInfo(name='skimeur',
token='4E661575E29A9488BC079DAA64CA5C05',
secret='qzokQFL9fBhcdRmzYHVfGCYmE96A8URSw2UBxyJW')
runApp('Google Drive/empirical_finance/app_biotech.R')
library(rsconnect)
rsconnect::setAccountInfo(name='skimeur',
token='4E661575E29A9488BC079DAA64CA5C05',
secret='qzokQFL9fBhcdRmzYHVfGCYmE96A8URSw2UBxyJW')
runApp('Google Drive/empirical_finance')
runApp('Google Drive/empirical_finance/biotechapp')
runApp('Google Drive/empirical_finance/app_biotech.R')
runApp('Google Drive/empirical_finance/shiny/biotech')
install.packages(c("git2r", "Hmisc", "mgcv", "pcaPP"))
install.packages(c("callr", "digest", "haven", "hms", "htmlTable", "htmlwidgets", "knitr", "mvtnorm", "pracma", "Rcpp", "reprex", "sp", "tibble", "tidyr", "tsDyn", "TTR", "vegan", "XLConnect", "XLConnectJars", "xml2"))
install.packages("digest")
library(shiny); runApp('Google Drive/empirical_finance/app_biotech.R')
